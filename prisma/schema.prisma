// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  external_id String    @unique
  email       String    @unique
  name        String
  password    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  picture     String
  role        UserRole  @default(USER)

// Relaciones
  expenses        Expense[]        // Gastos creados por el usuario
  groups          GroupMember[]    // Grupos a los que pertenece
  owedBy          Debt[]           @relation("creditor")  // Deudas donde este usuario es acreedor
  owesTo          Debt[]           @relation("debtor")    // Deudas donde este usuario debe
  paymentsReceived Payment[]        @relation("receiver") // Pagos recibidos
  paymentsMade    Payment[]        @relation("payer")    // Pagos realizados
  notifications   Notification[]   // Notificaciones recibidas
  expenseShares   ExpenseShare[]   // Participaciones en gastos
}

enum UserRole {
  USER            // Usuario normal
  ADMIN           // Administrador con privilegios en toda la app
  SUPER_ADMIN     // Super administrador con control total
}

// Categoría de gastos
model ExpenseCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  icon        String    // Nombre o referencia al icono
  color       String    // Color en formato hex
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relaciones
  expenses    Expense[]
}

// Grupos de usuarios para compartir gastos
model Group {
  id          String        @id @default(cuid())
  name        String
  description String?
  picture     String?       // URL o referencia a la imagen del grupo
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relaciones
  members     GroupMember[] // Miembros del grupo
  expenses    Expense[]     // Gastos del grupo
}

// Miembros de un grupo
model GroupMember {
  id        String    @id @default(cuid())
  groupId   String
  userId    String
  isAdmin   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relaciones
  group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([groupId, userId])
}

// Gastos que pueden ser compartidos entre varios usuarios
model Expense {
  id          String        @id @default(cuid())
  amount      Float
  description String
  date        DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relaciones con otras tablas
  userId      String        // Usuario que registró el gasto
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String
  category    ExpenseCategory @relation(fields: [categoryId], references: [id])
  groupId     String?       // Opcional: si el gasto pertenece a un grupo
  group       Group?        @relation(fields: [groupId], references: [id], onDelete: SetNull)
  
  // Relaciones
  shares      ExpenseShare[] // Cómo se divide este gasto
  debts       Debt[]        // Deudas generadas por este gasto
}

// Cómo se divide un gasto entre los usuarios
model ExpenseShare {
  id          String    @id @default(cuid())
  expenseId   String
  userId      String
  amount      Float     // Monto correspondiente a este usuario
  percentage  Float?    // Porcentaje opcional del gasto total
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relaciones
  expense     Expense   @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([expenseId, userId])
}

// Deudas entre usuarios
model Debt {
  id          String    @id @default(cuid())
  amount      Float
  description String?
  settled     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relaciones
  creditorId  String    // Usuario al que se le debe
  debtorId    String    // Usuario que debe
  expenseId   String    // Gasto que generó esta deuda
  
  creditor    User      @relation("creditor", fields: [creditorId], references: [id], onDelete: Cascade)
  debtor      User      @relation("debtor", fields: [debtorId], references: [id], onDelete: Cascade)
  expense     Expense   @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  
  // Pagos aplicados a esta deuda
  payments    PaymentDebt[]
  
  @@index([creditorId])
  @@index([debtorId])
}

// Pagos entre usuarios
model Payment {
  id          String        @id @default(cuid())
  amount      Float
  description String?
  date        DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relaciones
  payerId     String        // Usuario que realiza el pago
  receiverId  String        // Usuario que recibe el pago
  
  payer       User          @relation("payer", fields: [payerId], references: [id], onDelete: Cascade)
  receiver    User          @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  
  // Qué deudas se liquidan con este pago
  debts       PaymentDebt[]
  
  @@index([payerId])
  @@index([receiverId])
}

// Relación entre pagos y deudas
model PaymentDebt {
  id          String    @id @default(cuid())
  paymentId   String
  debtId      String
  amount      Float     // Monto aplicado a esta deuda específica
  createdAt   DateTime  @default(now())
  
  // Relaciones
  payment     Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  debt        Debt      @relation(fields: [debtId], references: [id], onDelete: Cascade)
  
  @@unique([paymentId, debtId])
}

// Notificaciones para usuarios
model Notification {
  id          String    @id @default(cuid())
  userId      String
  title       String
  message     String
  type        String    // Tipo de notificación: payment, expense, debt, etc.
  read        Boolean   @default(false)
  entityId    String?   // ID de la entidad relacionada (gasto, pago, etc.)
  createdAt   DateTime  @default(now())
  
  // Relaciones
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Balance entre usuarios (vista materializada o calculada)
model Balance {
  id          String    @id @default(cuid())
  userId1     String    // primer usuario
  userId2     String    // segundo usuario
  amount      Float     // monto (positivo si userId1 es acreedor, negativo si es deudor)
  lastUpdated DateTime  @default(now())
  
  @@unique([userId1, userId2])
  @@index([userId1])
  @@index([userId2])
}